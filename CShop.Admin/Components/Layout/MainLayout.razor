@using CShop.Admin.Services
@inherits LayoutComponentBase
@inject ThemeService ThemeService
@inject NavigationManager NavigationManager

<MudThemeProvider Theme="@_theme" IsDarkMode="@ThemeService.IsDarkMode" />
<MudPopoverProvider />
<MudDialogProvider FullWidth="true" MaxWidth="MaxWidth.Small" />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Elevation="1">
        @* Drawer toggle button *@
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                       OnClick="@((e) => DrawerToggle())" />
         @* System name *@
        <MudText Typo="Typo.h5" Class="ml-3">Admin</MudText>
        <MudSpacer />

        @* Theme toggle *@
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@ToggleDarkMode" />

        @* User Info dropdown *@
        <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu">
            <MudMenuItem>Profile</MudMenuItem>
            <MudMenuItem>My account</MudMenuItem>
            <MudMenuItem OnClick="HandleLogout">Logout</MudMenuItem>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent MaxWidth="MaxWidth.Medium" Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    private bool _drawerOpen = true;
    private MudTheme _theme = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _theme = new()
        {
            PaletteLight = ThemeService._lightPalette,
            PaletteDark = ThemeService._darkPalette,
            LayoutProperties = new LayoutProperties()
        };

        ThemeService.OnChange += async () => await InvokeAsync(StateHasChanged);

        Console.WriteLine("Initialing~~~~~~");

        _ = Task.Run(async () =>
        {
            await Task.Delay(1000); // Delay before fetching notifications
            //await GetNotificationAsnyc();
            await InvokeAsync(StateHasChanged); // Ensure UI is updated after fetching notifications
           // await ListenNotification();
        });
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public string DarkLightModeButtonIcon => ThemeService.IsDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private void ToggleDarkMode() => ThemeService.ToggleDarkMode();

    private void HandleLogout()
    {
        // Redirect to the login page or home page
        NavigationManager.NavigateTo("/logout", forceLoad: true);
    }

}